Hack sched-stats.h to try and print the cycle counter

From: Arun <arun@Atlantis.(none)>

value at the time of task context switch-out and
context switch-in to find out where the PMU registers
are getting screwed up.
---
 fs/proc/base.c            |    5 +++--
 fs/proc/pmu.c             |   44 +++++++++++++++++++++++++++++---------------
 include/linux/proc_fs.h   |    3 +++
 include/linux/sched.h     |    5 +++++
 include/linux/taskstats.h |    9 ++++++++-
 kernel/exit.c             |    5 +++++
 kernel/sched_stats.h      |   15 ++++++++++++---
 kernel/taskstats.c        |   10 ++++++++++
 8 files changed, 75 insertions(+), 21 deletions(-)

 
Index: cm-kernel_35/fs/proc/pmu.c
===================================================================
--- cm-kernel_35.orig/fs/proc/pmu.c	2011-12-18 15:28:06.933893998 -0800
+++ cm-kernel_35/fs/proc/pmu.c	2011-12-18 15:38:44.049894002 -0800
@@ -202,7 +202,7 @@
 	return idx;
 }
 
-static inline u32 armv7pmu_read_counter(int idx)
+u32 armv7pmu_read_counter(int idx)
 {
 	unsigned long value = 0;
 
@@ -369,7 +369,7 @@
 	}*/
 }
 
-void armv7pmu_enable_event(int idx)
+static void armv7pmu_enable_event(int counter, int event)
 {
     	unsigned long flags;
 
@@ -377,28 +377,28 @@
 	/*
 	 * Disable counter
 	 */
-	armv7_pmnc_disable_counter(idx);
+	armv7_pmnc_disable_counter(counter);
 
 	/*
 	 * Set event (if destined for PMNx counters)
 	 * We don't need to set the event if it's a cycle count
 	 */
-	if (idx != ARMV7_CYCLE_COUNTER)
-		armv7_pmnc_write_evtsel(idx, ARMV7_PERFCTR_PMNC_SW_INCR);
+	if (counter != ARMV7_CYCLE_COUNTER)
+		armv7_pmnc_write_evtsel(counter, event);
 
 	/*
 	 * Enable interrupt for this counter
 	 */
-	armv7_pmnc_enable_intens(idx);
+	armv7_pmnc_enable_intens(counter);
 
 	/*
 	 * Enable counter
 	 */
-	armv7_pmnc_enable_counter(idx);
+	armv7_pmnc_enable_counter(counter);
 	spin_unlock_irqrestore(&pmu_lock, flags);
 }
 
-static void armv7pmu_disable_event(int idx)
+static void armv7pmu_disable_event(int counter)
 {
     	unsigned long flags;
 
@@ -406,12 +406,12 @@
 	/*
 	 * Disable counter
 	 */
-	armv7_pmnc_disable_counter(idx);
+	armv7_pmnc_disable_counter(counter);
 
 	/*
 	 * Disable interrupt for this counter
 	 */
-	armv7_pmnc_disable_intens(idx);
+	armv7_pmnc_disable_intens(counter);
 
 	spin_unlock_irqrestore(&pmu_lock, flags);
 }
@@ -431,13 +431,23 @@
 	//armv7_enable_user_mode();
 }	
 
+void armv7pmu_re_enable(void)
+{
+	armv7pmu_start();
+	armv7pmu_enable_event(ARMV7_CYCLE_COUNTER, 0);
+	armv7pmu_enable_event(ARMV7_COUNTER0, ARMV7_PERFCTR_INSTR_EXECUTED);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 1, ARMV7_PERFCTR_ITLB_MISS);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 2, ARMV7_PERFCTR_PC_BRANCH_MIS_PRED);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 3, ARMV7_PERFCTR_IFETCH_MISS);
+}
+
 static void armv7pmu_stop(void)
 {
 	/* Disable all counters */
 	armv7_pmnc_write(armv7_pmnc_read() & ~ARMV7_PMNC_E);
 }
 
-static inline int perf_counter_proc_show(struct seq_file *m, void *v)
+/*static inline int perf_counter_proc_show(struct seq_file *m, void *v)
 {
 	unsigned long value = 0;
 
@@ -480,15 +490,19 @@
 	.llseek         = seq_lseek,
 	.release        = single_release,
 };
-
+*/
 static int __init armv7_init_pmnc(void)
 {
 	armv7pmu_start();
 
-	proc_create("perf_counter", 0, NULL, &perf_counter_proc_fops);
-	proc_create("enable_perf", 0, NULL, &enable_perf_proc_fops);
+	//proc_create("perf_counter", 0, NULL, &perf_counter_proc_fops);
+	//proc_create("enable_perf", 0, NULL, &enable_perf_proc_fops);
 
-	armv7pmu_enable_event(ARMV7_CYCLE_COUNTER);
+	armv7pmu_enable_event(ARMV7_CYCLE_COUNTER, 0);
+	armv7pmu_enable_event(ARMV7_COUNTER0, ARMV7_PERFCTR_INSTR_EXECUTED);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 1, ARMV7_PERFCTR_ITLB_MISS);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 2, ARMV7_PERFCTR_PC_BRANCH_MIS_PRED);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 3, ARMV7_PERFCTR_IFETCH_MISS);
 
 	return 0;
 
Index: cm-kernel_35/include/linux/proc_fs.h
===================================================================
--- cm-kernel_35.orig/include/linux/proc_fs.h	2011-12-18 15:25:35.957894001 -0800
+++ cm-kernel_35/include/linux/proc_fs.h	2011-12-20 17:25:13.901894001 -0800
@@ -250,6 +250,11 @@
 extern void kclist_add(struct kcore_list *, void *, size_t, int type);
 #endif
 
+extern void armv7pmu_re_enable(void);
+extern u32 armv7pmu_read_counter(int idx);
+extern u64 get_inoctet_netstat(void);
+extern u64 get_outoctet_netstat(void);
+
 union proc_op {
 	int (*proc_get_link)(struct inode *, struct path *);
 	int (*proc_read)(struct task_struct *task, char *page);
Index: cm-kernel_35/include/linux/sched.h
===================================================================
--- cm-kernel_35.orig/include/linux/sched.h	2011-12-18 15:25:35.925894001 -0800
+++ cm-kernel_35/include/linux/sched.h	2011-12-18 15:28:18.273894000 -0800
@@ -630,6 +630,8 @@
 	struct mutex cred_guard_mutex;	/* guard against foreign influences on
 					 * credential calculations
 					 * (notably. ptrace) */
+	/*PMU Counters*/
+	unsigned long ccntr, cntr1, cntr2, cntr3, cntr4;
 };
 
 /* Context switch must be unlocked if interrupts are to be enabled */
@@ -1515,6 +1517,8 @@
 		unsigned long memsw_bytes; /* uncharged mem+swap usage */
 	} memcg_batch;
 #endif
+	/* PMU Counters */
+	unsigned long ccntr, cntr1, cntr2, cntr3, cntr4;
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
Index: cm-kernel_35/include/linux/taskstats.h
===================================================================
--- cm-kernel_35.orig/include/linux/taskstats.h	2011-12-18 15:25:35.977894001 -0800
+++ cm-kernel_35/include/linux/taskstats.h	2011-12-18 15:28:18.277894000 -0800
@@ -33,7 +33,7 @@
  */
 
 
-#define TASKSTATS_VERSION	8
+#define TASKSTATS_VERSION	9
 #define TS_COMM_LEN		32	/* should be >= TASK_COMM_LEN
 					 * in linux/sched.h */
 
@@ -163,6 +163,13 @@
 	/* Delay waiting for memory reclaim */
 	__u64	freepages_count;
 	__u64	freepages_delay_total;
+
+	/* PMU Counter readings */
+	__u64	ccntr;	
+	__u64	cntr1;	
+	__u64	cntr2;	
+	__u64	cntr3;	
+	__u64	cntr4;	
 };
 
 
Index: cm-kernel_35/kernel/exit.c
===================================================================
--- cm-kernel_35.orig/kernel/exit.c	2011-12-18 15:25:35.761894001 -0800
+++ cm-kernel_35/kernel/exit.c	2011-12-18 15:28:18.289894000 -0800
@@ -129,6 +129,11 @@
 		sig->maj_flt += tsk->maj_flt;
 		sig->nvcsw += tsk->nvcsw;
 		sig->nivcsw += tsk->nivcsw;
+		sig->ccntr += tsk->ccntr;
+		sig->cntr1 += tsk->cntr1;
+		sig->cntr2 += tsk->cntr2;
+		sig->cntr3 += tsk->cntr3;
+		sig->cntr4 += tsk->cntr4;
 		sig->inblock += task_io_get_inblock(tsk);
 		sig->oublock += task_io_get_oublock(tsk);
 		task_io_accounting_add(&sig->ioac, &tsk->ioac);
Index: cm-kernel_35/kernel/sched_stats.h
===================================================================
--- cm-kernel_35.orig/kernel/sched_stats.h	2011-12-18 15:25:35.721894001 -0800
+++ cm-kernel_35/kernel/sched_stats.h	2011-12-20 17:27:23.517894001 -0800
@@ -1,3 +1,7 @@
+#include <linux/proc_fs.h>
+#include <linux/ftrace.h>
+#include <linux/snmp.h>
+#include <linux/ip.h>
 
 #ifdef CONFIG_SCHEDSTATS
 /*
@@ -224,6 +228,46 @@
 		sched_info_queued(t);
 }
 
+/*#define __print_flags(flag, delim, flag_array...)                       \
+        ({                                                              \
+                static const struct trace_print_flags __flags[] =       \
+                        { flag_array, { -1, NULL }};                    \
+                ftrace_print_flags_seq(p, delim, flag, __flags);        \
+        })
+*/
+
+static void sched_switch_tracepoint(struct task_struct *prev)
+{
+	unsigned long long logInOctet, logOutOctet;
+	
+	logInOctet = get_inoctet_netstat();
+	logOutOctet = get_outoctet_netstat();
+	armv7pmu_re_enable();
+    	prev->ccntr += armv7pmu_read_counter(1); 
+    	prev->cntr1 += armv7pmu_read_counter(2); 
+    	prev->cntr2 += armv7pmu_read_counter(3); 
+    	prev->cntr3 += armv7pmu_read_counter(4); 
+    	prev->cntr4 += armv7pmu_read_counter(5); 
+	trace_printk("%d,%s,%d,%llu,%lu,%llu,%llu,%lu,%lu,%lu,%lu,%lu\n",
+		prev->real_parent->pid,
+		prev->comm,
+		prev->pid,
+		/*prev->state ?
+		 __print_flags(prev->state, "|",
+			{ 1, "S"} , { 2, "D" }, { 4, "T" }, { 8, "t" },
+			{ 16, "Z" }, { 32, "X" }, { 64, "x" },
+			{ 128, "W" }) : "R",*/
+		kstat_cpu(0).cpustat.user + kstat_cpu(0).cpustat.nice +
+		kstat_cpu(0).cpustat.system + kstat_cpu(0).cpustat.idle,
+		prev->utime + prev->stime,
+		logInOctet, logOutOctet,
+		prev->ccntr,
+		prev->cntr1,
+		prev->cntr2,
+		prev->cntr3,
+		prev->cntr4);
+}
+
 /*
  * Called when tasks are switched involuntarily due, typically, to expiring
  * their time slice.  (This may also be called when switching to or from
@@ -239,11 +283,15 @@
 	 * stats about how efficient we were at scheduling the idle
 	 * process, however.
 	 */
-	if (prev != rq->idle)
+	if (prev != rq->idle) {
+		sched_switch_tracepoint(prev);
 		sched_info_depart(prev);
+	}
 
-	if (next != rq->idle)
+	if (next != rq->idle) {
 		sched_info_arrive(next);
+		armv7pmu_re_enable();
+	}
 }
 static inline void
 sched_info_switch(struct task_struct *prev, struct task_struct *next)
Index: cm-kernel_35/kernel/taskstats.c
===================================================================
--- cm-kernel_35.orig/kernel/taskstats.c	2011-12-18 15:25:35.793894001 -0800
+++ cm-kernel_35/kernel/taskstats.c	2011-12-18 15:28:18.305894000 -0800
@@ -191,6 +191,11 @@
 	stats->version = TASKSTATS_VERSION;
 	stats->nvcsw = tsk->nvcsw;
 	stats->nivcsw = tsk->nivcsw;
+	stats->ccntr = tsk->ccntr;
+	stats->cntr1 = tsk->cntr1;
+	stats->cntr2 = tsk->cntr2;
+	stats->cntr3 = tsk->cntr3;
+	stats->cntr4 = tsk->cntr4;
 	bacct_add_tsk(stats, tsk);
 
 	/* fill in extended acct fields */
@@ -248,6 +253,11 @@
 
 		stats->nvcsw += tsk->nvcsw;
 		stats->nivcsw += tsk->nivcsw;
+		stats->ccntr +=tsk->ccntr;
+		stats->cntr1 +=tsk->cntr1;
+		stats->cntr2 +=tsk->cntr2;
+		stats->cntr3 +=tsk->cntr3;
+		stats->cntr4 +=tsk->cntr4;
 	} while_each_thread(first, tsk);
 
 	unlock_task_sighand(first, &flags);
Index: cm-kernel_35/kernel/trace/trace.c
===================================================================
--- cm-kernel_35.orig/kernel/trace/trace.c	2011-12-18 15:25:35.889894001 -0800
+++ cm-kernel_35/kernel/trace/trace.c	2011-12-20 17:28:40.277894001 -0800
@@ -1757,8 +1757,7 @@
 
 static void print_func_help_header(struct seq_file *m)
 {
-	seq_puts(m, "#           TASK-PID    CPU#    TIMESTAMP  FUNCTION\n");
-	seq_puts(m, "#              | |       |          |         |\n");
+	seq_puts(m, "#           TIMESTAMP, FUNCTION, PARENT-PID, TASK, PID, CPUTIME, PROCESS-TIME, IN-PACKETS, OUT-PACKETS, CCNTR, CNTR1, CNTR2, CNTR3, CNTR4 \n");
 }
 
 
Index: cm-kernel_35/kernel/trace/trace_output.c
===================================================================
--- cm-kernel_35.orig/kernel/trace/trace_output.c	2011-12-18 15:25:35.833894001 -0800
+++ cm-kernel_35/kernel/trace/trace_output.c	2011-12-18 15:28:18.329894000 -0800
@@ -599,8 +599,9 @@
 
 	trace_find_cmdline(entry->pid, comm);
 
-	return trace_seq_printf(s, "%16s-%-5d [%03d] %5lu.%06lu: ",
-				comm, entry->pid, iter->cpu, secs, usec_rem);
+	//return trace_seq_printf(s, "%16s-%-5d [%03d] %5lu.%06lu: ",
+	//			comm, entry->pid, iter->cpu, secs, usec_rem);
+	return trace_seq_printf(s, "%5lu.%06lu: ", secs, usec_rem);
 }
 
 int trace_print_lat_context(struct trace_iterator *iter)
Index: cm-kernel_35/net/ipv4/proc.c
===================================================================
--- cm-kernel_35.orig/net/ipv4/proc.c	2011-12-20 16:24:48.973894002 -0800
+++ cm-kernel_35/net/ipv4/proc.c	2011-12-20 17:45:45.493894001 -0800
@@ -409,7 +409,27 @@
 	.release = single_release_net,
 };
 
+struct net *trace_net;
 
+u64 get_inoctet_netstat(void)
+{
+	if (trace_net == NULL)
+		return 0;
+
+	return snmp_fold_field64((void __percpu **)trace_net->mib.ip_statistics,
+                                             snmp4_ipextstats_list[6].entry,
+                                             offsetof(struct ipstats_mib, syncp));
+}
+
+u64 get_outoctet_netstat(void)
+{
+	if (trace_net == NULL)
+		return 0;
+
+	return snmp_fold_field64((void __percpu **)trace_net->mib.ip_statistics,
+                                             snmp4_ipextstats_list[7].entry,
+                                             offsetof(struct ipstats_mib, syncp));
+}
 
 /*
  *	Output /proc/net/netstat
@@ -419,6 +439,9 @@
 	int i;
 	struct net *net = seq->private;
 
+	if (trace_net == NULL)
+		trace_net = net;
+
 	seq_puts(seq, "TcpExt:");
 	for (i = 0; snmp4_net_list[i].name != NULL; i++)
 		seq_printf(seq, " %s", snmp4_net_list[i].name);
