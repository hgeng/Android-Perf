Hack sched-stats.h to try and print the cycle counter

From: Arun <arun@Atlantis.(none)>

value at the time of task context switch-out and
context switch-in to find out where the PMU registers
are getting screwed up.
---
 fs/proc/base.c            |    5 +++--
 fs/proc/pmu.c             |   44 +++++++++++++++++++++++++++++---------------
 include/linux/proc_fs.h   |    3 +++
 include/linux/sched.h     |    5 +++++
 include/linux/taskstats.h |    9 ++++++++-
 kernel/exit.c             |    5 +++++
 kernel/sched_stats.h      |   15 ++++++++++++---
 kernel/taskstats.c        |   10 ++++++++++
 8 files changed, 75 insertions(+), 21 deletions(-)

 
Index: cm-kernel_35/fs/proc/pmu.c
===================================================================
--- cm-kernel_35.orig/fs/proc/pmu.c	2012-02-29 17:49:09.514004000 -0800
+++ cm-kernel_35/fs/proc/pmu.c	2012-02-29 17:49:12.498004000 -0800
@@ -202,7 +202,7 @@
 	return idx;
 }
 
-static inline u32 armv7pmu_read_counter(int idx)
+u32 armv7pmu_read_counter(int idx)
 {
 	unsigned long value = 0;
 
@@ -369,7 +369,7 @@
 	}*/
 }
 
-void armv7pmu_enable_event(int idx)
+static void armv7pmu_enable_event(int counter, int event)
 {
     	unsigned long flags;
 
@@ -377,28 +377,28 @@
 	/*
 	 * Disable counter
 	 */
-	armv7_pmnc_disable_counter(idx);
+	armv7_pmnc_disable_counter(counter);
 
 	/*
 	 * Set event (if destined for PMNx counters)
 	 * We don't need to set the event if it's a cycle count
 	 */
-	if (idx != ARMV7_CYCLE_COUNTER)
-		armv7_pmnc_write_evtsel(idx, ARMV7_PERFCTR_PMNC_SW_INCR);
+	if (counter != ARMV7_CYCLE_COUNTER)
+		armv7_pmnc_write_evtsel(counter, event);
 
 	/*
 	 * Enable interrupt for this counter
 	 */
-	armv7_pmnc_enable_intens(idx);
+	armv7_pmnc_enable_intens(counter);
 
 	/*
 	 * Enable counter
 	 */
-	armv7_pmnc_enable_counter(idx);
+	armv7_pmnc_enable_counter(counter);
 	spin_unlock_irqrestore(&pmu_lock, flags);
 }
 
-static void armv7pmu_disable_event(int idx)
+static void armv7pmu_disable_event(int counter)
 {
     	unsigned long flags;
 
@@ -406,12 +406,12 @@
 	/*
 	 * Disable counter
 	 */
-	armv7_pmnc_disable_counter(idx);
+	armv7_pmnc_disable_counter(counter);
 
 	/*
 	 * Disable interrupt for this counter
 	 */
-	armv7_pmnc_disable_intens(idx);
+	armv7_pmnc_disable_intens(counter);
 
 	spin_unlock_irqrestore(&pmu_lock, flags);
 }
@@ -431,13 +431,23 @@
 	//armv7_enable_user_mode();
 }	
 
+void armv7pmu_re_enable(void)
+{
+	armv7pmu_start();
+	armv7pmu_enable_event(ARMV7_CYCLE_COUNTER, 0);
+	armv7pmu_enable_event(ARMV7_COUNTER0, ARMV7_PERFCTR_INSTR_EXECUTED);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 1, ARMV7_PERFCTR_DTLB_REFILL);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 2, ARMV7_PERFCTR_DCACHE_REFILL);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 3, ARMV7_PERFCTR_PC_BRANCH_MIS_PRED);
+}
+
 static void armv7pmu_stop(void)
 {
 	/* Disable all counters */
 	armv7_pmnc_write(armv7_pmnc_read() & ~ARMV7_PMNC_E);
 }
 
-static inline int perf_counter_proc_show(struct seq_file *m, void *v)
+/*static inline int perf_counter_proc_show(struct seq_file *m, void *v)
 {
 	unsigned long value = 0;
 
@@ -480,15 +490,19 @@
 	.llseek         = seq_lseek,
 	.release        = single_release,
 };
-
+*/
 static int __init armv7_init_pmnc(void)
 {
 	armv7pmu_start();
 
-	proc_create("perf_counter", 0, NULL, &perf_counter_proc_fops);
-	proc_create("enable_perf", 0, NULL, &enable_perf_proc_fops);
+	//proc_create("perf_counter", 0, NULL, &perf_counter_proc_fops);
+	//proc_create("enable_perf", 0, NULL, &enable_perf_proc_fops);
 
-	armv7pmu_enable_event(ARMV7_CYCLE_COUNTER);
+	armv7pmu_enable_event(ARMV7_CYCLE_COUNTER, 0);
+	armv7pmu_enable_event(ARMV7_COUNTER0, ARMV7_PERFCTR_INSTR_EXECUTED);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 1, ARMV7_PERFCTR_DTLB_REFILL);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 2, ARMV7_PERFCTR_DCACHE_REFILL);
+	armv7pmu_enable_event(ARMV7_COUNTER0 + 3, ARMV7_PERFCTR_PC_BRANCH_MIS_PRED);
 
 	return 0;
 
Index: cm-kernel_35/include/linux/proc_fs.h
===================================================================
--- cm-kernel_35.orig/include/linux/proc_fs.h	2012-02-29 17:49:09.450004000 -0800
+++ cm-kernel_35/include/linux/proc_fs.h	2012-02-29 17:49:12.514004000 -0800
@@ -250,6 +250,15 @@
 extern void kclist_add(struct kcore_list *, void *, size_t, int type);
 #endif
 
+extern void armv7pmu_re_enable(void);
+extern u32 armv7pmu_read_counter(int idx);
+extern u64 get_inoctet_netstat(void);
+extern u64 get_outoctet_netstat(void);
+extern int brightness_value;
+extern unsigned long *log_3g_in, *log_3g_out;
+extern unsigned log_frequency;
+extern int log_voltage;
+
 union proc_op {
 	int (*proc_get_link)(struct inode *, struct path *);
 	int (*proc_read)(struct task_struct *task, char *page);
Index: cm-kernel_35/kernel/sched_stats.h
===================================================================
--- cm-kernel_35.orig/kernel/sched_stats.h	2012-02-29 17:49:09.166004000 -0800
+++ cm-kernel_35/kernel/sched_stats.h	2012-02-29 18:13:57.538004001 -0800
@@ -1,3 +1,7 @@
+#include <linux/proc_fs.h>
+#include <linux/ftrace.h>
+#include <linux/snmp.h>
+#include <linux/ip.h>
 
 #ifdef CONFIG_SCHEDSTATS
 /*
@@ -224,6 +228,63 @@
 		sched_info_queued(t);
 }
 
+/*#define __print_flags(flag, delim, flag_array...)                       \
+        ({                                                              \
+                static const struct trace_print_flags __flags[] =       \
+                        { flag_array, { -1, NULL }};                    \
+                ftrace_print_flags_seq(p, delim, flag, __flags);        \
+        })
+*/
+
+unsigned long ccntr=0, cntr1=0, cntr2=0, cntr3=0, cntr4=0;
+
+int brightness_value;
+unsigned long *log_3g_in, *log_3g_out;
+unsigned log_frequency;
+int log_voltage;
+
+static void sched_switch_tracepoint(struct task_struct *prev, struct task_struct *next)
+{
+	unsigned long long wifiInOctet, wifiOutOctet;
+	unsigned long dataIn, dataOut;
+	struct user_struct *user;
+	int brightness;
+	
+	user = get_current_user();
+	wifiInOctet = get_inoctet_netstat();
+	wifiOutOctet = get_outoctet_netstat();
+	if (log_3g_in)
+		dataIn = *log_3g_in;
+	if (log_3g_out)
+		dataOut = *log_3g_out;
+	brightness = brightness_value;
+	armv7pmu_re_enable();
+    	ccntr += armv7pmu_read_counter(1);
+    	cntr1 += armv7pmu_read_counter(2);
+    	cntr2 += armv7pmu_read_counter(3);
+    	cntr3 += armv7pmu_read_counter(4);
+   	cntr4 += armv7pmu_read_counter(5);
+
+	if (next->pid == 0)
+		return;
+
+	trace_printk("%d,%s,%d,%llu,%lu,%llu,%llu,%lu,%lu,%d,%u,%d,%lu,%lu,%lu,%lu,%lu\n",
+		user->uid,
+		prev->comm,
+		prev->pid,
+		/*prev->state ?
+		 __print_flags(prev->state, "|",
+			{ 1, "S"} , { 2, "D" }, { 4, "T" }, { 8, "t" },
+			{ 16, "Z" }, { 32, "X" }, { 64, "x" },
+			{ 128, "W" }) : "R",*/
+		kstat_cpu(0).cpustat.user + kstat_cpu(0).cpustat.nice +
+		kstat_cpu(0).cpustat.system + kstat_cpu(0).cpustat.idle,
+		prev->utime + prev->stime,
+		wifiInOctet, wifiOutOctet, dataIn, dataOut,
+		brightness,log_frequency,log_voltage,
+		ccntr,cntr1,cntr2,cntr3,cntr4);
+}
+
 /*
  * Called when tasks are switched involuntarily due, typically, to expiring
  * their time slice.  (This may also be called when switching to or from
@@ -239,11 +300,15 @@
 	 * stats about how efficient we were at scheduling the idle
 	 * process, however.
 	 */
-	if (prev != rq->idle)
+	if (prev != rq->idle) {
+		sched_switch_tracepoint(prev, next);
 		sched_info_depart(prev);
+	}
 
-	if (next != rq->idle)
+	if (next != rq->idle) {
 		sched_info_arrive(next);
+		//armv7pmu_re_enable();
+	}
 }
 static inline void
 sched_info_switch(struct task_struct *prev, struct task_struct *next)
Index: cm-kernel_35/kernel/trace/trace.c
===================================================================
--- cm-kernel_35.orig/kernel/trace/trace.c	2012-02-29 17:49:09.274004000 -0800
+++ cm-kernel_35/kernel/trace/trace.c	2012-02-29 18:14:17.138004002 -0800
@@ -1757,8 +1757,7 @@
 
 static void print_func_help_header(struct seq_file *m)
 {
-	seq_puts(m, "#           TASK-PID    CPU#    TIMESTAMP  FUNCTION\n");
-	seq_puts(m, "#              | |       |          |         |\n");
+	seq_puts(m, "# TIMESTAMP, FUNCTION, UID, TASK, PID, CPUTIME, PROCESS-TIME, WIFI-IN(BYTES), WIFI-OUT(BYTES), 3G-IN(BYTES), 3G-OUT(BYTES), BRIGHTNESS, FREQUENCY, VDD, CCNTR, CNTR1, CNTR2, CNTR3, CNTR4 \n");
 }
 
 
Index: cm-kernel_35/kernel/trace/trace_output.c
===================================================================
--- cm-kernel_35.orig/kernel/trace/trace_output.c	2012-02-29 17:49:09.234004000 -0800
+++ cm-kernel_35/kernel/trace/trace_output.c	2012-02-29 17:49:12.550004000 -0800
@@ -599,8 +599,9 @@
 
 	trace_find_cmdline(entry->pid, comm);
 
-	return trace_seq_printf(s, "%16s-%-5d [%03d] %5lu.%06lu: ",
-				comm, entry->pid, iter->cpu, secs, usec_rem);
+	//return trace_seq_printf(s, "%16s-%-5d [%03d] %5lu.%06lu: ",
+	//			comm, entry->pid, iter->cpu, secs, usec_rem);
+	return trace_seq_printf(s, "%5lu.%06lu: ", secs, usec_rem);
 }
 
 int trace_print_lat_context(struct trace_iterator *iter)
Index: cm-kernel_35/net/ipv4/proc.c
===================================================================
--- cm-kernel_35.orig/net/ipv4/proc.c	2012-02-29 17:49:09.126004000 -0800
+++ cm-kernel_35/net/ipv4/proc.c	2012-02-29 17:49:12.554004000 -0800
@@ -409,7 +409,27 @@
 	.release = single_release_net,
 };
 
+struct net *trace_net;
 
+u64 get_inoctet_netstat(void)
+{
+	if (trace_net == NULL)
+		return 0;
+
+	return snmp_fold_field64((void __percpu **)trace_net->mib.ip_statistics,
+                                             snmp4_ipextstats_list[6].entry,
+                                             offsetof(struct ipstats_mib, syncp));
+}
+
+u64 get_outoctet_netstat(void)
+{
+	if (trace_net == NULL)
+		return 0;
+
+	return snmp_fold_field64((void __percpu **)trace_net->mib.ip_statistics,
+                                             snmp4_ipextstats_list[7].entry,
+                                             offsetof(struct ipstats_mib, syncp));
+}
 
 /*
  *	Output /proc/net/netstat
@@ -419,6 +439,9 @@
 	int i;
 	struct net *net = seq->private;
 
+	if (trace_net == NULL)
+		trace_net = net;
+
 	seq_puts(seq, "TcpExt:");
 	for (i = 0; snmp4_net_list[i].name != NULL; i++)
 		seq_printf(seq, " %s", snmp4_net_list[i].name);
Index: cm-kernel_35/drivers/leds/leds.h
===================================================================
--- cm-kernel_35.orig/drivers/leds/leds.h	2012-02-29 17:49:09.338004000 -0800
+++ cm-kernel_35/drivers/leds/leds.h	2012-02-29 17:49:12.558004000 -0800
@@ -16,6 +16,7 @@
 #include <linux/device.h>
 #include <linux/rwsem.h>
 #include <linux/leds.h>
+#include <linux/proc_fs.h>
 
 static inline void led_set_brightness(struct led_classdev *led_cdev,
 					enum led_brightness value)
@@ -25,6 +26,7 @@
 	led_cdev->brightness = value;
 	if (!(led_cdev->flags & LED_SUSPENDED))
 		led_cdev->brightness_set(led_cdev, value);
+	brightness_value = value;
 }
 
 static inline int led_get_brightness(struct led_classdev *led_cdev)
Index: cm-kernel_35/drivers/net/msm_rmnet.c
===================================================================
--- cm-kernel_35.orig/drivers/net/msm_rmnet.c	2012-02-29 17:49:09.310004000 -0800
+++ cm-kernel_35/drivers/net/msm_rmnet.c	2012-02-29 17:49:12.566004000 -0800
@@ -27,6 +27,7 @@
 #include <linux/etherdevice.h>
 #include <linux/skbuff.h>
 #include <linux/wakelock.h>
+#include <linux/proc_fs.h>
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
 #include <linux/earlysuspend.h>
@@ -357,6 +358,8 @@
 static struct net_device_stats *rmnet_get_stats(struct net_device *dev)
 {
 	struct rmnet_private *p = netdev_priv(dev);
+	log_3g_in = &p->stats.rx_bytes;
+	log_3g_out = &p->stats.tx_bytes;
 	return &p->stats;
 }
 
Index: cm-kernel_35/arch/arm/mach-msm/acpuclock-qsd8x50.c
===================================================================
--- cm-kernel_35.orig/arch/arm/mach-msm/acpuclock-qsd8x50.c	2012-02-29 17:49:09.402004000 -0800
+++ cm-kernel_35/arch/arm/mach-msm/acpuclock-qsd8x50.c	2012-02-29 17:49:12.570004000 -0800
@@ -23,6 +23,7 @@
 #include <linux/cpufreq.h>
 #include <linux/regulator/consumer.h>
 #include <linux/regulator/driver.h>
+#include <linux/proc_fs.h>
 
 #include <mach/board.h>
 #include <mach/msm_iomap.h>
@@ -439,6 +440,8 @@
 		mutex_unlock(&drv_state.lock);
 	}
 
+	log_frequency = next->acpu_khz;
+	log_voltage = next->vdd;
 	return 0;
 }
 
